    clear
    
    // P A R T E   1
    //Lectura de archivo de datos "datos.xls")
    ///
    //
Value=0.0
[fd,SST,Sheetnames,Sheetpos] = xls_open("datos.xls")
[Value,TextInd] = xls_read(fd,Sheetpos(1))
mclose(fd)

    // Asignación de variables. Resistencia a compresión es fc. Esfuerzo de fluencia del acero es fy.
    // Radio de la columna es R2. Distancia a eje de las varillas a partir de la cara externa es r2
    //Número de barras longitudinales es Nor. Diametro de barras es dou. Ángulo entre la primera barra 
    // superior derecha y el eje vertical es ph. Deformación última del concreto es Ecu. Máxima deformación 
    //del acero es Esm. Tipo de estribos es ST(Con dos opciones). .
    fc=Value(3,2)/0.0981; fy=Value(4,2)/0.0981; R2=Value(5,2); r2=Value(6,2); Nor=Value(7,2);
    dou=Value(8,2); phi=Value(9,2); Esy=Value(10,2); Ecu=Value(13,2); Esm=Value(14,2); 
    ST=Value(15,12); Comb=Value(2,12)

    // Lectura de arreglo Mu-Pu
for i=1:Comb
    
Pu(i,1)=Value(i+3,11); Pu(i,2)=Value(i+3,12);
end
 

   // Cálculo de betha de acuerdo con fc
   if fc <=280 then
       be=0.85;
   else
       be=0.85-(0.05/7)*(fc/9.81-28)
   end
    if be <0.65 then
         be=0.65;
    end
    
    // Cálculo de área gruesa es Ag. Area de cada barra es Abo. As es área 
    // total de acero. p es cuantía de acero. Pot es capacidad de falla a
    // tensión. Poc es capacidad a compresión
    Ag=%pi*R2^2; Abo=%pi*dou^2/4; As=Nor*Abo;
    p=As/Ag, Pot=As*fy; Poc=0.85*fc*(Ag-As)+Pot; 
    
    // Anex es ángulo entre barras
anex=2*%pi/(Nor); dlo=R2-r2;
i=1;
while i<=Nor
        // Arreglo Bo contiene area de barras Bo(:,1). Posición de barras Bo(:,2)
        Bo(i,1)=Abo; Bo(i,2)=cos((i-1)*anex+phi/57.2957795131)*dlo;
        if Bo(i,2)>= 0 then
         Bo(i,2)=R2-Bo(i,2)
        else
         Bo(i,2)=R2+abs(Bo(i,2))
        end
     
    i=i+1;
end
   // Peralte de la sección, dmin.
   dmin=max(Bo(:,2));
   
   
   
   
   //////
   // P A R T E   2.
   // Curva nominal de interacción
   // Resistencia a compresión del concreto
   // Compresión y momento del semicírculo superior
   A1=%pi*R2^2/2; y1=4*R2/(3*%pi);
   F1=0.85*fc*A1; M1=F1*y1;
   
   i=1; k=1;z=1
 while z>=-500
    // Valor del eje neutro (c) y profundidad del bloque de esfuerzos(a)
    Et=z*Esy
        c=-Ecu*dmin/(Et-Ecu);
        if (be*c)<=(2*R2)then
            a=be*c;
        else
            a=2*R2;
        end
        
     // Compresión del concreto para el caso 1
    // Cuando a< 2R2 y a> R2
       if (a < 2*R2) & (a>=R2) then
            y=a-R2; alpha=2*acos(y/R2);
            A2=%pi*R2^2/2; y2=4*R2/(3*%pi);
            A3=R2^2*(alpha-sin(alpha))/2; y3=4*R2*(sin(alpha/2))^3/(3*(alpha-sin(alpha)));
            Ac=A2-A3; yc=(A2*y2-A3*y3)/Ac; 
            F2=0.85*fc*Ac; M2=F2*yc;
            CC(i,1)=F1+F2; CC(i,2)=M1-M2;
      // Caso 2 cuando a < R2
        else
            y=R2-a; alpha=2*acos(y/R2);
            Ac=R2^2*(alpha-sin(alpha))/2; yc=4*R2*(sin(alpha/2))^3/(3*(alpha-sin(alpha)));
            F2=0.85*fc*Ac; M2=F2*yc;
            CC(i,1)=F2; CC(i,2)=M2;        
        end    
        
        //  Cálculo de fuerzas y momentos en las barras de acero
        // Bo(j,3) es la deformación de las barras
        
                for j=1:Nor
                  Bo(j,3)=Ecu*(c-Bo(j,2))/c               
                    if abs(Bo(j,3))>Esy then
                    Bo(j,3)=sign(Bo(j,3))*1*Esy;
                    end
                                       
                    // Valor del esfuerzo 
                    if (Bo(j,3)>0)& (a>=Bo(j,2)) then
                     Bo(j,4)=Bo(j,3)*fy/Esy-0.85*fc;
                    else
                     Bo(j,4)=Bo(j,3)*fy/Esy;
                    end
               
                    // Valor de la fuerza, brazo de palanca y momento  
                    Bo(j,5)=Bo(j,1)*Bo(j,4); Bo(j,6)=R2-Bo(j,2); Bo(j,7)=Bo(j,6)*Bo(j,5);
   
            end
            
         // Suma de fuerzas FTo(:,1), momentos FTo(:,3), y listado de a y deformación 
         // de la barra superio
         FTo(i,1)=sum(Bo(:,5)); FTo(i,2)=sum(Bo(:,7));FTo(i,3)=a; FTo(i,4)=Et;       
        
        i=i+1;k=k+1;
        if Et>-0.005 then
            z=z-.1
        else
            z=z-.25
        end
        
end
  
// Arreglo Forces momento, carga axial, profundidad del eje neutro y deformación extrema  
Forces(:,2)=((CC(:,1)+FTo(:,1))/1000)*9.81;
Forces(:,1)=((CC(:,2)+FTo(:,2))/100000)*9.81;
Forces(:,3)=FTo(:,3); Forces(:,4)=FTo(:,4);

    // Ajuste de arreglo Forces para eliminar valores de a repetidos
     
     com=Forces(1,3); contador=1
    for j=2: k-1
        if Forces(j,3)==com then
            contador=contador+1
        end          
    end
    
    // Arreglos definitifivo de curva esfuerzo deformación nominal 
    // CN(:,1)momento, CN(:,2)fuerzas. CN(:,3) profundidad del eje neutro,
    // CN(:,4) deformaci+on última, m es el tamaño del arreglo CN
    m=1
    CN(m,1)=0.0; CN(m,2)=Forces(1,2); CN(m,3)=Forces(1,3); CN(m,4)=Forces(1,4); 
    for j=contador+1:k-1
        m=m+1;
        CN(m,1)=Forces(j,1); CN(m,2)=Forces(j,2); CN(m,3)=Forces(j,3); CN(m,4)=Forces(j,4);         
    end


    
 
    // P A R T E 3 
    // Curva resistente ACI 318-19
   ////
   // Ajuste de los factores de reducción
   if ST==1 then
       f1=0.65; f2=0.25;
   elseif ST==2 then
       f1=0.75; f2=0.15
   else
   end
   
   // Curva resistente completa
    for i = 1:m
        if CN(i,4) >= -Esy then
        FRR(i)=f1
        CN(i,5)= CN (i,1) * FRR(i)
        CN(i,6)= CN (i,2) * FRR(i)   
        elseif (CN(i,4) < -Esy) & (CN(i,4) >= -0.005) then
        FRR(i)=(f1 + f2 * (-1*CN(i,4) - Esy) / Ecu)
        CN(i,5) = CN(i,1) * FRR(i)
        CN(i,6) = CN(i,2) * FRR(i)
        else
        FRR(i)=0.9
        CN(i,5)=CN(i,1) *FRR(i) // CN(i,5) es momento, CN(i,6)son fuerzas
        CN(i,6)= CN(i,2) * FRR(i)
        end
    end

    // Valor de carga máxima en función del tipo de estribos
        if ST==2 then
        Pmax=0.85*CN(1,6)
        else
        Pmax=0.80*CN(1,6) 
    end
    
    // Ajuste de carga resistente para considerar la meseta horizontal
    for i=1:m
        CN(i,7)=CN(i,6)-Pmax
        CN(i,8)=57.29577951*atan(CN(i,5),CN(i,7))
    end 
      
    for i=1:m-1
        if (CN(i,8)<=90.0)&(CN(i+1,8)>90.0) then
        b=i
        end  
    end
  
    // Pendiente del segmento de recta donde inicia la meseta
    pend=(CN(b+1,5)-CN(b,5))/(CN(b,6)-CN(b+1,6))
    d1=Pmax-CN(b+1,6)
    Mrmax=CN(b+1,5)-pend*d1
 
    // Valores de la curva resistente, CR(:,1) son momentos, CR(:,2) son fuerzas
    CR(1,1)=0.0; CR(1,2)=Pmax; CR(2,1)=Mrmax; CR(2,2)=Pmax;j=3
    for i=b+1:m
     CR(j,1)=CN(i,5);CR(j,2)=CN(i,6);CR(j,4)=CN(i,4); CR(j,5)=FRR(i);
     j=j+1, // j-1 es el tamaño del arreglo CR  
    end
    
    
    
    /// P A R T E 4
    // Cálculo de momento y fuerza axial resistente
    // Cálculo de ángulo de cada punto de la curva resistente respecto al 
    // eje vertical

    for l=1:j-1
    CR(l,3)=57.29577951*atan(CR(l,1),CR(l,2))    
    end

    for i=1:Comb
        if (Pu(i,1)==0)&(Pu(i,2)>0) then
        Pu(i,3)=0
        elseif (Pu(i,1)==0)&(Pu(i,2)<0) then
         Pu(i,3)=180
        else
        Pu(i,3)=57.29577951*atan(Pu(i,1),Pu(i,2))  
        end

    end
// Ubicacion de angulo de interseccion pu(i,4)
for i=1: Comb
    for l=1:j-2
        if (Pu(i,3)>=CR(l,3))&(Pu(i,3)<CR(l+1,3)) then
            Pu(i,4)=l;
        else
        end 
    end  
end

    //Sistema de ecuaciones entre segmento de curva resistente 
    // y valores de Mu, Pu. Cálculo de m2, PU(i,5), m1 en Pu(i,6)
    // m2 pendiente de la recta OA. m1 pendiente de CR
for i=1:Comb   
    if (Pu(i,3)~=0) &  (Pu(i,3)~=180)then 
        Pu(i,5)=Pu(i,2)/Pu(i,1)
        z=int(Pu(i,4))
        Pu(i,6)=(CR(z,2)-CR(z+1,2))/(CR(z,1)-CR(z+1,1))
        //termino independiente y1-m1x1 Pu(i,7)
        Pu(i,7)=CR(z,2)-Pu(i,6)*CR(z,1)
        M(1,1)=1.0; M(2,1)=1.0; M(1,2)=-Pu(i,6);M(2,2)=-Pu(i,5);
        B(1)=Pu(i,7); B(2)=0.0;MINV=inv(M); R=MINV*B; 
        // MR en Pu(i,8) PR en PU(i,9)
        Pu(i,8)=R(2,1); Pu(i,9)=R(1,1);
    else
    end
    
    if Pu(i,3)==0.0 then
       // MR en Pu(i,8) PR en PU(i,9)
        Pu(i,8)=0.0; Pu(i,9)=Pmax;
    elseif Pu(i,3)==180.0 then
        Pu(i,8)=0.0; Pu(i,9)=CR(j-1,2)
    else
    end
    // Razón MU/MR y Pu/PR
  Pu(i,10)=Pu(i,1)/Pu(i,8); Pu(i,11)=Pu(i,2)/Pu(i,9)
end

    // Arreglo para cada combinación de análisis
    PL(:,1)=0.0; z=0
    for z=1:Comb
        for i=2:3
         if i==2 then
         PL(i,2*z-1)=Pu(z,1);PL(i,2*z)=Pu(z,2);
         else
         PL(i,2*z-1)=Pu(z,8);PL(i,2*z)=Pu(z,9);
         end
        end
    end

    
    
    // P A R T E  5
    // Impresión de resultados
   plot2d (CR(:,1), CR(:,2),leg="Curva resistente");
a=gca(); // Handle on axes entity
a.x_location = "origin";
a.y_location = "origin";
// Some operations on entities created by plot2d ...
//isoview
a=gca();
a.children // list the children of the axes.
// There are a compound made of two polylines and a legend
poly1= a.children(1).children(1); //store polyline handle into poly1
poly1.foreground = 2; // another way to change the style...
poly1.thickness = 4;  // ...and the thickness of a curve.
poly1.clip_state='off'; // clipping control
leg = a.children(2); // store legend handle into leg
leg.font_style = 10;
leg.line_mode = "off";
  

   for i=1: Comb
   plot2d(PL(:,2*i-1),PL(:,2*i));
     plot(PL(:,2*i-1),PL(:,2*i),"o-")
    a=gca();
    a.children // list the children of the axes.
    // There are a compound made of two polylines and a legend
     poly1= a.children(1).children(1); //store polyline handle into poly1
    poly1.foreground = 1; // another way to change the style...
     poly1.thickness = 3;  // ...and the thickness of a curve.
     poly1.mark_style=9
     leg = a.children(2); // store legend handle into leg
    end
  xgrid();
    xtitle("Diagrama de interacción","Momento resistente, KN.m","Carga axial resistente, KN");
   
 
 //create a file with data
u=mopen('resultados.txt','w');
mfprintf(u,'REVISION DE COLUMNA CIRCULAR SOLIDA\n')
mfprintf(u,'Unidades KN m\n')
mfprintf(u,'      Pu         Mu          Pr         Mr    Pu/Pr(Mu/Mr) \n')
for i=1:Comb  
 mfprintf(u,"%10.2f %10.2f  %10.2f %10.2f %8.2f\n", Pu(i,1), Pu(i,2), Pu(i,8), Pu(i,9), Pu(i,10))    
end
mfprintf(u,'        \n')
mfprintf(u,'      D(cm)     pho         Angulo   # de barras\n')
mfprintf(u,"%10.2f %10.4f  %10.2f   %7.0f\n", 2*R2, p, phi, Nor)  
mclose(u); //close the file








